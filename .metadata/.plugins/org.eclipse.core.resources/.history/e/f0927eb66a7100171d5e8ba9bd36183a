package amazon_data_analyzer;

import static org.apache.spark.sql.functions.count;
import static org.apache.spark.sql.functions.desc;

import java.util.Arrays;
import java.util.List;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Encoders;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.functions;

public class AmazonDataAnalyzer {

	private SparkSession sparkSession;
	private Dataset<Row> ds;

	public AmazonDataAnalyzer() {

		// create spark Session
		sparkSession = SparkSession.builder().master("local[*]").appName("RoundForest Amazon Analyzer").getOrCreate();
	}

	public boolean readFile(String csvFile) {
		boolean bSuccessful = false;
		try {
			ds = sparkSession.read().option("header", "true").csv(csvFile);
			bSuccessful = true; 
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return bSuccessful;
	}

	public List<Row> findMostActiveUsers(int maxRows) {
		List<Row> mostActiveUsersList = null;

		if (ds != null) {
			try {
				mostActiveUsersList = ds.groupBy("ProfileName").agg(count("ProfileName").alias("ProfileNameCount"))
						.sort(desc("ProfileNameCount")).limit(maxRows).orderBy("ProfileName").collectAsList();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return mostActiveUsersList;
	}

	public List<Row> findMostCommentedFoodItems(int maxRows) {
		List<Row> mostCommentedItemsList = null;
		
		if (ds != null) {
			try {
				mostCommentedItemsList =  ds.groupBy("ProductId").agg(count("ProductId").alias("ProductIdCount")).sort(desc("ProductIdCount"))
				.limit(maxRows).orderBy("ProductId").collectAsList();
			}catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return mostCommentedItemsList;
	}

	public List<Row> findMostUsedWords(int MaxRows) {

		Dataset<Row> rr = ds.select("Text");

		Dataset<String> words = rr.flatMap(row -> {
			return Arrays.asList(row.mkString().toLowerCase().replace("\"", "").split(" ")).iterator();
		}, Encoders.STRING()).filter(s -> !s.isEmpty()).coalesce(1); // one partition

		Dataset<Row> t = words.groupBy("value").count().toDF("word", "count");
		t = t.sort(functions.desc("count")).limit(MaxRows).orderBy("word");
		List<Row> list = t.select("word").collectAsList();

		return list;
	}

	public static void main(String[] args) {
		public static final int LIST_SIZE = 1000;
		if(args.length == 0)
	    {
	        System.out.println("Proper Usage is: file path");
	        System.exit(0);
	    }
		String filePath = args[0];

		AmazonDataAnalyzer dataAnalyzer = new AmazonDataAnalyzer();

		dataAnalyzer.readFile(filePath);
		// Dataset<Row> userDataSet = dataAnalyzer.findMostActiveUsers(1000);
		// userDataSet.show(10);

		// Dataset<Row> foodItemDataSet =
		// dataAnalyzer.findMostCommentedFoodItems(1000);
		// foodItemDataSet.show(10);

		List<Row> mostUsedWordsDataFrame = dataAnalyzer.findMostUsedWords(1000);
		System.out.println(mostUsedWordsDataFrame.toString());
	}

}
